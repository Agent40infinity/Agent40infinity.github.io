@page "/projects/{Title}"
@inject IJSRuntime js
@using System.Reflection;

<VolumeSlider />
<Header Toggled="true" />

@if (selectedType != null)
{
    @renderFragment
}
else
{
    <div class="specifications">
        <p class="title">In Progress!</p>
        <p class="subtext">Check back later for more details.</p>
    </div>
}

<Footer />

<script>
    $(document).ready(function () {
    $('footer').css({ display: 'block', opacity: 1 });
    $('.volume-container').fadeIn(2000);
    $('.volume-container').css({ display: "flex" });
    });
</script>

@code {
    [Parameter]
    public string Title { get; set; } = "";

    Type[] components => Assembly
        .GetExecutingAssembly()
        .GetTypes()
        .Where(t => t.BaseType == typeof(ComponentBase))
        .ToArray();
    Type? selectedType;

    RenderFragment renderFragment;

    protected override void OnInitialized()
    {
        selectedType = components.Where(t => t.Name.ToUpper() == Title.ToUpper()).FirstOrDefault();

        if (selectedType == null)
        {
            return;    
        }

        renderFragment = (builder) =>
        {
            builder.OpenComponent(0, selectedType);
            builder.CloseComponent();
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("Rendered", Navigation.duration);
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}

<style>
    * {
        font-family: 'Perpetua';
        margin: 0px;
        padding: 0px;
    }

    body {
        overflow-x: hidden;
        overflow-y: hidden;
        background-color: black;
    }

    .specifications {
        padding-top: 500px;
        width: 100%;
        text-align: center;
        color: white;
    }

    .title {
        font-size: 48px;
    }

    .subtext {
        font-size: 36px;
    }
</style>